// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cdtppackage.proto

#ifndef PROTOBUF_INCLUDED_Cdtppackage_2eproto
#define PROTOBUF_INCLUDED_Cdtppackage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Cdtppackage_2eproto 

namespace protobuf_Cdtppackage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Cdtppackage_2eproto
class CDTPPackage;
class CDTPPackageDefaultTypeInternal;
extern CDTPPackageDefaultTypeInternal _CDTPPackage_default_instance_;
namespace google {
namespace protobuf {
template<> ::CDTPPackage* Arena::CreateMaybeMessage<::CDTPPackage>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class CDTPPackage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CDTPPackage) */ {
 public:
  CDTPPackage();
  virtual ~CDTPPackage();

  CDTPPackage(const CDTPPackage& from);

  inline CDTPPackage& operator=(const CDTPPackage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDTPPackage(CDTPPackage&& from) noexcept
    : CDTPPackage() {
    *this = ::std::move(from);
  }

  inline CDTPPackage& operator=(CDTPPackage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDTPPackage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDTPPackage* internal_default_instance() {
    return reinterpret_cast<const CDTPPackage*>(
               &_CDTPPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CDTPPackage* other);
  friend void swap(CDTPPackage& a, CDTPPackage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDTPPackage* New() const final {
    return CreateMaybeMessage<CDTPPackage>(NULL);
  }

  CDTPPackage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDTPPackage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDTPPackage& from);
  void MergeFrom(const CDTPPackage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDTPPackage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sign = 4;
  void clear_sign();
  static const int kSignFieldNumber = 4;
  const ::std::string& sign() const;
  void set_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_sign(::std::string&& value);
  #endif
  void set_sign(const char* value);
  void set_sign(const char* value, size_t size);
  ::std::string* mutable_sign();
  ::std::string* release_sign();
  void set_allocated_sign(::std::string* sign);

  // string pkgId = 7;
  void clear_pkgid();
  static const int kPkgIdFieldNumber = 7;
  const ::std::string& pkgid() const;
  void set_pkgid(const ::std::string& value);
  #if LANG_CXX11
  void set_pkgid(::std::string&& value);
  #endif
  void set_pkgid(const char* value);
  void set_pkgid(const char* value, size_t size);
  ::std::string* mutable_pkgid();
  ::std::string* release_pkgid();
  void set_allocated_pkgid(::std::string* pkgid);

  // string from = 8;
  void clear_from();
  static const int kFromFieldNumber = 8;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // string to = 9;
  void clear_to();
  static const int kToFieldNumber = 9;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // string senderPK = 10;
  void clear_senderpk();
  static const int kSenderPKFieldNumber = 10;
  const ::std::string& senderpk() const;
  void set_senderpk(const ::std::string& value);
  #if LANG_CXX11
  void set_senderpk(::std::string&& value);
  #endif
  void set_senderpk(const char* value);
  void set_senderpk(const char* value, size_t size);
  ::std::string* mutable_senderpk();
  ::std::string* release_senderpk();
  void set_allocated_senderpk(::std::string* senderpk);

  // string receiverPK = 11;
  void clear_receiverpk();
  static const int kReceiverPKFieldNumber = 11;
  const ::std::string& receiverpk() const;
  void set_receiverpk(const ::std::string& value);
  #if LANG_CXX11
  void set_receiverpk(::std::string&& value);
  #endif
  void set_receiverpk(const char* value);
  void set_receiverpk(const char* value, size_t size);
  ::std::string* mutable_receiverpk();
  ::std::string* release_receiverpk();
  void set_allocated_receiverpk(::std::string* receiverpk);

  // bytes data = 12;
  void clear_data();
  static const int kDataFieldNumber = 12;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int32 command = 1;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  ::google::protobuf::int32 command() const;
  void set_command(::google::protobuf::int32 value);

  // int32 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // int32 algorithm = 3;
  void clear_algorithm();
  static const int kAlgorithmFieldNumber = 3;
  ::google::protobuf::int32 algorithm() const;
  void set_algorithm(::google::protobuf::int32 value);

  // int32 dem = 5;
  void clear_dem();
  static const int kDemFieldNumber = 5;
  ::google::protobuf::int32 dem() const;
  void set_dem(::google::protobuf::int32 value);

  // fixed64 timestamp = 6;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CDTPPackage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sign_;
  ::google::protobuf::internal::ArenaStringPtr pkgid_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr senderpk_;
  ::google::protobuf::internal::ArenaStringPtr receiverpk_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 command_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 algorithm_;
  ::google::protobuf::int32 dem_;
  ::google::protobuf::uint64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Cdtppackage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CDTPPackage

// int32 command = 1;
inline void CDTPPackage::clear_command() {
  command_ = 0;
}
inline ::google::protobuf::int32 CDTPPackage::command() const {
  // @@protoc_insertion_point(field_get:CDTPPackage.command)
  return command_;
}
inline void CDTPPackage::set_command(::google::protobuf::int32 value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:CDTPPackage.command)
}

// int32 version = 2;
inline void CDTPPackage::clear_version() {
  version_ = 0;
}
inline ::google::protobuf::int32 CDTPPackage::version() const {
  // @@protoc_insertion_point(field_get:CDTPPackage.version)
  return version_;
}
inline void CDTPPackage::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:CDTPPackage.version)
}

// int32 algorithm = 3;
inline void CDTPPackage::clear_algorithm() {
  algorithm_ = 0;
}
inline ::google::protobuf::int32 CDTPPackage::algorithm() const {
  // @@protoc_insertion_point(field_get:CDTPPackage.algorithm)
  return algorithm_;
}
inline void CDTPPackage::set_algorithm(::google::protobuf::int32 value) {
  
  algorithm_ = value;
  // @@protoc_insertion_point(field_set:CDTPPackage.algorithm)
}

// string sign = 4;
inline void CDTPPackage::clear_sign() {
  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CDTPPackage::sign() const {
  // @@protoc_insertion_point(field_get:CDTPPackage.sign)
  return sign_.GetNoArena();
}
inline void CDTPPackage::set_sign(const ::std::string& value) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDTPPackage.sign)
}
#if LANG_CXX11
inline void CDTPPackage::set_sign(::std::string&& value) {
  
  sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CDTPPackage.sign)
}
#endif
inline void CDTPPackage::set_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDTPPackage.sign)
}
inline void CDTPPackage::set_sign(const char* value, size_t size) {
  
  sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDTPPackage.sign)
}
inline ::std::string* CDTPPackage::mutable_sign() {
  
  // @@protoc_insertion_point(field_mutable:CDTPPackage.sign)
  return sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDTPPackage::release_sign() {
  // @@protoc_insertion_point(field_release:CDTPPackage.sign)
  
  return sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDTPPackage::set_allocated_sign(::std::string* sign) {
  if (sign != NULL) {
    
  } else {
    
  }
  sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign);
  // @@protoc_insertion_point(field_set_allocated:CDTPPackage.sign)
}

// int32 dem = 5;
inline void CDTPPackage::clear_dem() {
  dem_ = 0;
}
inline ::google::protobuf::int32 CDTPPackage::dem() const {
  // @@protoc_insertion_point(field_get:CDTPPackage.dem)
  return dem_;
}
inline void CDTPPackage::set_dem(::google::protobuf::int32 value) {
  
  dem_ = value;
  // @@protoc_insertion_point(field_set:CDTPPackage.dem)
}

// fixed64 timestamp = 6;
inline void CDTPPackage::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CDTPPackage::timestamp() const {
  // @@protoc_insertion_point(field_get:CDTPPackage.timestamp)
  return timestamp_;
}
inline void CDTPPackage::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CDTPPackage.timestamp)
}

// string pkgId = 7;
inline void CDTPPackage::clear_pkgid() {
  pkgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CDTPPackage::pkgid() const {
  // @@protoc_insertion_point(field_get:CDTPPackage.pkgId)
  return pkgid_.GetNoArena();
}
inline void CDTPPackage::set_pkgid(const ::std::string& value) {
  
  pkgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDTPPackage.pkgId)
}
#if LANG_CXX11
inline void CDTPPackage::set_pkgid(::std::string&& value) {
  
  pkgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CDTPPackage.pkgId)
}
#endif
inline void CDTPPackage::set_pkgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pkgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDTPPackage.pkgId)
}
inline void CDTPPackage::set_pkgid(const char* value, size_t size) {
  
  pkgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDTPPackage.pkgId)
}
inline ::std::string* CDTPPackage::mutable_pkgid() {
  
  // @@protoc_insertion_point(field_mutable:CDTPPackage.pkgId)
  return pkgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDTPPackage::release_pkgid() {
  // @@protoc_insertion_point(field_release:CDTPPackage.pkgId)
  
  return pkgid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDTPPackage::set_allocated_pkgid(::std::string* pkgid) {
  if (pkgid != NULL) {
    
  } else {
    
  }
  pkgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pkgid);
  // @@protoc_insertion_point(field_set_allocated:CDTPPackage.pkgId)
}

// string from = 8;
inline void CDTPPackage::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CDTPPackage::from() const {
  // @@protoc_insertion_point(field_get:CDTPPackage.from)
  return from_.GetNoArena();
}
inline void CDTPPackage::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDTPPackage.from)
}
#if LANG_CXX11
inline void CDTPPackage::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CDTPPackage.from)
}
#endif
inline void CDTPPackage::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDTPPackage.from)
}
inline void CDTPPackage::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDTPPackage.from)
}
inline ::std::string* CDTPPackage::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:CDTPPackage.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDTPPackage::release_from() {
  // @@protoc_insertion_point(field_release:CDTPPackage.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDTPPackage::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:CDTPPackage.from)
}

// string to = 9;
inline void CDTPPackage::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CDTPPackage::to() const {
  // @@protoc_insertion_point(field_get:CDTPPackage.to)
  return to_.GetNoArena();
}
inline void CDTPPackage::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDTPPackage.to)
}
#if LANG_CXX11
inline void CDTPPackage::set_to(::std::string&& value) {
  
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CDTPPackage.to)
}
#endif
inline void CDTPPackage::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDTPPackage.to)
}
inline void CDTPPackage::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDTPPackage.to)
}
inline ::std::string* CDTPPackage::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:CDTPPackage.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDTPPackage::release_to() {
  // @@protoc_insertion_point(field_release:CDTPPackage.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDTPPackage::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:CDTPPackage.to)
}

// string senderPK = 10;
inline void CDTPPackage::clear_senderpk() {
  senderpk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CDTPPackage::senderpk() const {
  // @@protoc_insertion_point(field_get:CDTPPackage.senderPK)
  return senderpk_.GetNoArena();
}
inline void CDTPPackage::set_senderpk(const ::std::string& value) {
  
  senderpk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDTPPackage.senderPK)
}
#if LANG_CXX11
inline void CDTPPackage::set_senderpk(::std::string&& value) {
  
  senderpk_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CDTPPackage.senderPK)
}
#endif
inline void CDTPPackage::set_senderpk(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  senderpk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDTPPackage.senderPK)
}
inline void CDTPPackage::set_senderpk(const char* value, size_t size) {
  
  senderpk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDTPPackage.senderPK)
}
inline ::std::string* CDTPPackage::mutable_senderpk() {
  
  // @@protoc_insertion_point(field_mutable:CDTPPackage.senderPK)
  return senderpk_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDTPPackage::release_senderpk() {
  // @@protoc_insertion_point(field_release:CDTPPackage.senderPK)
  
  return senderpk_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDTPPackage::set_allocated_senderpk(::std::string* senderpk) {
  if (senderpk != NULL) {
    
  } else {
    
  }
  senderpk_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), senderpk);
  // @@protoc_insertion_point(field_set_allocated:CDTPPackage.senderPK)
}

// string receiverPK = 11;
inline void CDTPPackage::clear_receiverpk() {
  receiverpk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CDTPPackage::receiverpk() const {
  // @@protoc_insertion_point(field_get:CDTPPackage.receiverPK)
  return receiverpk_.GetNoArena();
}
inline void CDTPPackage::set_receiverpk(const ::std::string& value) {
  
  receiverpk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDTPPackage.receiverPK)
}
#if LANG_CXX11
inline void CDTPPackage::set_receiverpk(::std::string&& value) {
  
  receiverpk_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CDTPPackage.receiverPK)
}
#endif
inline void CDTPPackage::set_receiverpk(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  receiverpk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDTPPackage.receiverPK)
}
inline void CDTPPackage::set_receiverpk(const char* value, size_t size) {
  
  receiverpk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDTPPackage.receiverPK)
}
inline ::std::string* CDTPPackage::mutable_receiverpk() {
  
  // @@protoc_insertion_point(field_mutable:CDTPPackage.receiverPK)
  return receiverpk_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDTPPackage::release_receiverpk() {
  // @@protoc_insertion_point(field_release:CDTPPackage.receiverPK)
  
  return receiverpk_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDTPPackage::set_allocated_receiverpk(::std::string* receiverpk) {
  if (receiverpk != NULL) {
    
  } else {
    
  }
  receiverpk_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receiverpk);
  // @@protoc_insertion_point(field_set_allocated:CDTPPackage.receiverPK)
}

// bytes data = 12;
inline void CDTPPackage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CDTPPackage::data() const {
  // @@protoc_insertion_point(field_get:CDTPPackage.data)
  return data_.GetNoArena();
}
inline void CDTPPackage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDTPPackage.data)
}
#if LANG_CXX11
inline void CDTPPackage::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CDTPPackage.data)
}
#endif
inline void CDTPPackage::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDTPPackage.data)
}
inline void CDTPPackage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDTPPackage.data)
}
inline ::std::string* CDTPPackage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:CDTPPackage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDTPPackage::release_data() {
  // @@protoc_insertion_point(field_release:CDTPPackage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDTPPackage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:CDTPPackage.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Cdtppackage_2eproto
