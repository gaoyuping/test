// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cdtppackage.proto

#include "Cdtppackage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

class CDTPPackageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDTPPackage>
      _instance;
} _CDTPPackage_default_instance_;
namespace protobuf_Cdtppackage_2eproto {
static void InitDefaultsCDTPPackage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CDTPPackage_default_instance_;
    new (ptr) ::CDTPPackage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CDTPPackage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDTPPackage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDTPPackage}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CDTPPackage.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDTPPackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDTPPackage, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDTPPackage, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDTPPackage, algorithm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDTPPackage, sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDTPPackage, dem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDTPPackage, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDTPPackage, pkgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDTPPackage, from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDTPPackage, to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDTPPackage, senderpk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDTPPackage, receiverpk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDTPPackage, data_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CDTPPackage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CDTPPackage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Cdtppackage.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021Cdtppackage.proto\"\315\001\n\013CDTPPackage\022\017\n\007c"
      "ommand\030\001 \001(\005\022\017\n\007version\030\002 \001(\005\022\021\n\talgorit"
      "hm\030\003 \001(\005\022\014\n\004sign\030\004 \001(\t\022\013\n\003dem\030\005 \001(\005\022\021\n\tt"
      "imestamp\030\006 \001(\006\022\r\n\005pkgId\030\007 \001(\t\022\014\n\004from\030\010 "
      "\001(\t\022\n\n\002to\030\t \001(\t\022\020\n\010senderPK\030\n \001(\t\022\022\n\nrec"
      "eiverPK\030\013 \001(\t\022\014\n\004data\030\014 \001(\014b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 235);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Cdtppackage.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Cdtppackage_2eproto

// ===================================================================

void CDTPPackage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDTPPackage::kCommandFieldNumber;
const int CDTPPackage::kVersionFieldNumber;
const int CDTPPackage::kAlgorithmFieldNumber;
const int CDTPPackage::kSignFieldNumber;
const int CDTPPackage::kDemFieldNumber;
const int CDTPPackage::kTimestampFieldNumber;
const int CDTPPackage::kPkgIdFieldNumber;
const int CDTPPackage::kFromFieldNumber;
const int CDTPPackage::kToFieldNumber;
const int CDTPPackage::kSenderPKFieldNumber;
const int CDTPPackage::kReceiverPKFieldNumber;
const int CDTPPackage::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDTPPackage::CDTPPackage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Cdtppackage_2eproto::scc_info_CDTPPackage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDTPPackage)
}
CDTPPackage::CDTPPackage(const CDTPPackage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sign().size() > 0) {
    sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  pkgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pkgid().size() > 0) {
    pkgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pkgid_);
  }
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from().size() > 0) {
    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.to().size() > 0) {
    to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  senderpk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.senderpk().size() > 0) {
    senderpk_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.senderpk_);
  }
  receiverpk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.receiverpk().size() > 0) {
    receiverpk_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receiverpk_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&command_, &from.command_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&command_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:CDTPPackage)
}

void CDTPPackage::SharedCtor() {
  sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pkgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  senderpk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiverpk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&command_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&command_)) + sizeof(timestamp_));
}

CDTPPackage::~CDTPPackage() {
  // @@protoc_insertion_point(destructor:CDTPPackage)
  SharedDtor();
}

void CDTPPackage::SharedDtor() {
  sign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pkgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  senderpk_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiverpk_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDTPPackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CDTPPackage::descriptor() {
  ::protobuf_Cdtppackage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Cdtppackage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDTPPackage& CDTPPackage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Cdtppackage_2eproto::scc_info_CDTPPackage.base);
  return *internal_default_instance();
}


void CDTPPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:CDTPPackage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pkgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  senderpk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiverpk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&command_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&command_)) + sizeof(timestamp_));
  _internal_metadata_.Clear();
}

bool CDTPPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDTPPackage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 command = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 algorithm = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &algorithm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sign = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sign().data(), static_cast<int>(this->sign().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CDTPPackage.sign"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dem = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dem_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 timestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pkgId = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pkgid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pkgid().data(), static_cast<int>(this->pkgid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CDTPPackage.pkgId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string from = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from().data(), static_cast<int>(this->from().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CDTPPackage.from"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string to = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to().data(), static_cast<int>(this->to().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CDTPPackage.to"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string senderPK = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_senderpk()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->senderpk().data(), static_cast<int>(this->senderpk().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CDTPPackage.senderPK"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string receiverPK = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiverpk()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->receiverpk().data(), static_cast<int>(this->receiverpk().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CDTPPackage.receiverPK"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDTPPackage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDTPPackage)
  return false;
#undef DO_
}

void CDTPPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDTPPackage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 command = 1;
  if (this->command() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->command(), output);
  }

  // int32 version = 2;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }

  // int32 algorithm = 3;
  if (this->algorithm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->algorithm(), output);
  }

  // string sign = 4;
  if (this->sign().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sign().data(), static_cast<int>(this->sign().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CDTPPackage.sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sign(), output);
  }

  // int32 dem = 5;
  if (this->dem() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dem(), output);
  }

  // fixed64 timestamp = 6;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->timestamp(), output);
  }

  // string pkgId = 7;
  if (this->pkgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pkgid().data(), static_cast<int>(this->pkgid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CDTPPackage.pkgId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->pkgid(), output);
  }

  // string from = 8;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from().data(), static_cast<int>(this->from().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CDTPPackage.from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->from(), output);
  }

  // string to = 9;
  if (this->to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to().data(), static_cast<int>(this->to().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CDTPPackage.to");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->to(), output);
  }

  // string senderPK = 10;
  if (this->senderpk().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->senderpk().data(), static_cast<int>(this->senderpk().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CDTPPackage.senderPK");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->senderpk(), output);
  }

  // string receiverPK = 11;
  if (this->receiverpk().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->receiverpk().data(), static_cast<int>(this->receiverpk().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CDTPPackage.receiverPK");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->receiverpk(), output);
  }

  // bytes data = 12;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:CDTPPackage)
}

::google::protobuf::uint8* CDTPPackage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CDTPPackage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 command = 1;
  if (this->command() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->command(), target);
  }

  // int32 version = 2;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->version(), target);
  }

  // int32 algorithm = 3;
  if (this->algorithm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->algorithm(), target);
  }

  // string sign = 4;
  if (this->sign().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sign().data(), static_cast<int>(this->sign().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CDTPPackage.sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sign(), target);
  }

  // int32 dem = 5;
  if (this->dem() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dem(), target);
  }

  // fixed64 timestamp = 6;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->timestamp(), target);
  }

  // string pkgId = 7;
  if (this->pkgid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pkgid().data(), static_cast<int>(this->pkgid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CDTPPackage.pkgId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->pkgid(), target);
  }

  // string from = 8;
  if (this->from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from().data(), static_cast<int>(this->from().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CDTPPackage.from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->from(), target);
  }

  // string to = 9;
  if (this->to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to().data(), static_cast<int>(this->to().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CDTPPackage.to");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->to(), target);
  }

  // string senderPK = 10;
  if (this->senderpk().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->senderpk().data(), static_cast<int>(this->senderpk().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CDTPPackage.senderPK");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->senderpk(), target);
  }

  // string receiverPK = 11;
  if (this->receiverpk().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->receiverpk().data(), static_cast<int>(this->receiverpk().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CDTPPackage.receiverPK");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->receiverpk(), target);
  }

  // bytes data = 12;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDTPPackage)
  return target;
}

size_t CDTPPackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDTPPackage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sign = 4;
  if (this->sign().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sign());
  }

  // string pkgId = 7;
  if (this->pkgid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pkgid());
  }

  // string from = 8;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from());
  }

  // string to = 9;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to());
  }

  // string senderPK = 10;
  if (this->senderpk().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->senderpk());
  }

  // string receiverPK = 11;
  if (this->receiverpk().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->receiverpk());
  }

  // bytes data = 12;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // int32 command = 1;
  if (this->command() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->command());
  }

  // int32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  // int32 algorithm = 3;
  if (this->algorithm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->algorithm());
  }

  // int32 dem = 5;
  if (this->dem() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dem());
  }

  // fixed64 timestamp = 6;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDTPPackage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDTPPackage)
  GOOGLE_DCHECK_NE(&from, this);
  const CDTPPackage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDTPPackage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDTPPackage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDTPPackage)
    MergeFrom(*source);
  }
}

void CDTPPackage::MergeFrom(const CDTPPackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDTPPackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sign().size() > 0) {

    sign_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  if (from.pkgid().size() > 0) {

    pkgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pkgid_);
  }
  if (from.from().size() > 0) {

    from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  if (from.to().size() > 0) {

    to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  if (from.senderpk().size() > 0) {

    senderpk_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.senderpk_);
  }
  if (from.receiverpk().size() > 0) {

    receiverpk_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receiverpk_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.command() != 0) {
    set_command(from.command());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.algorithm() != 0) {
    set_algorithm(from.algorithm());
  }
  if (from.dem() != 0) {
    set_dem(from.dem());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void CDTPPackage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDTPPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDTPPackage::CopyFrom(const CDTPPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDTPPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDTPPackage::IsInitialized() const {
  return true;
}

void CDTPPackage::Swap(CDTPPackage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDTPPackage::InternalSwap(CDTPPackage* other) {
  using std::swap;
  sign_.Swap(&other->sign_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pkgid_.Swap(&other->pkgid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  from_.Swap(&other->from_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  to_.Swap(&other->to_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  senderpk_.Swap(&other->senderpk_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  receiverpk_.Swap(&other->receiverpk_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(command_, other->command_);
  swap(version_, other->version_);
  swap(algorithm_, other->algorithm_);
  swap(dem_, other->dem_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CDTPPackage::GetMetadata() const {
  protobuf_Cdtppackage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Cdtppackage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CDTPPackage* Arena::CreateMaybeMessage< ::CDTPPackage >(Arena* arena) {
  return Arena::CreateInternal< ::CDTPPackage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
